dokugen must be able to solve Sudoku itself to be able to generate them.

A simple BFS of statespace on constraints should be fastest. But to get difficulty, we'll need to solve as a human does.

We'll have a fastSolve, which uses a constrained BFS, and a humanSolve, which proceeds knowing a grid can be solved and returns a difficulty.

Grids are passed back and forth over channels. They should be easily serializable and small whenever possible, but still be fast for common operations. You may read and write to them only if you have a ref, and you can only get a ref via a channel.


Grid {
	data string
	cells Cell[DIM * DIM]
}

TODO:
* Replace Fill() with a better implementation (isn't there a known polynomial time solution?). In the worst case, the work for the next bullet will unlock it.
* Make Solve() go in a random order so that we can use it to implement Fill. Likely will need some randomization in FiniteQueue among equivalent rank. That will require either putting in nils when we grab something not off the front, or an option so you can opt into more expensive shuffleInsert.

* Grid should suppot copy operations and have copy-on-write semantics with shared cells.
* A way to generate filled squares (to start removing things from)
* Actualy generate sudokus
* Rate sudokus based on experienced difficulty. (See http://www.longwood.edu/assets/mathematics/Team2975_ProblemB.pdf)