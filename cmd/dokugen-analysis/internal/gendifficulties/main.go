package main

import (
	"fmt"
	"github.com/jkomoros/sudoku/cmd/dokugen-analysis/internal/wekaparser"
	"io/ioutil"
	"log"
	"os"
	"sort"
	"strconv"
)

const INPUT_FILE_NAME = "input.txt"
const INPUT_SAMPLE_FILE_NAME = "input.SAMPLE.txt"
const OUTPUT_FILE_NAME = "../../../../hs_difficulty_weights.go"

//TODO: get rid of util/difficulty-converter.py and use this instead

func main() {

	input, err := ioutil.ReadFile(INPUT_FILE_NAME)

	if err != nil {
		if !os.IsNotExist(err) {
			log.Fatalln("Got err trying to open first file:", err)
		}
		input, err = ioutil.ReadFile(INPUT_SAMPLE_FILE_NAME)
		if err != nil {
			log.Fatalln("Couldn't load either of the input files.")
		}
	}

	weights, err := wekaparser.ParseWeights(string(input))

	if err != nil {
		log.Fatalln("Couldn't parse weights:", err)
	}

	r2, err := wekaparser.ParseR2(string(input))

	if err != nil {
		log.Println("Couldn't extract r2:", err)
	}

	var output string

	output += "package sudoku\n\n"
	output += "//auto-generated by difficulty-convert.py DO NOT EDIT\n\n"

	output += "func init() {\n"

	output += "\t//Model with R2 = " + strconv.FormatFloat(r2, 'f', -1, 64) + "\n"

	output += "\tLoadDifficultyModel(map[string]float64{\n"

	var keys []string
	for key, _ := range weights {
		keys = append(keys, key)
	}

	sort.Strings(keys)

	for _, key := range keys {
		output += "\t\t\"" + key + "\" : " + strconv.FormatFloat(weights[key], 'f', -1, 64) + ",\n"
	}

	output += "\t})\n"
	output += "}\n"

	err = ioutil.WriteFile(OUTPUT_FILE_NAME, []byte(output), 0644)

	if err != nil {
		log.Fatalln("Writing file didn't work:", err)
	}

	fmt.Println("Don't forget to run gofmt on hs_difficulty_weights.go")
}
