package main

import (
	"flag"
	"strings"
	"testing"
)

func TestPhaseEnabled(t *testing.T) {

	var tests = []struct {
		start    Phase
		end      Phase
		test     Phase
		expected bool
	}{
		{
			Difficulties,
			Analysis,
			Analysis,
			true,
		},
		{
			Difficulties,
			Analysis,
			Difficulties,
			true,
		},
		{
			Difficulties,
			Analysis,
			Histogram,
			false,
		},
		{
			Analysis,
			Histogram,
			Difficulties,
			false,
		},
	}

	for i, test := range tests {
		options := getDefaultOptions()
		options.start = test.start
		options.end = test.end

		//Don't do fixup, since we're stuffing in properties that wouldn't
		//have come from the command line anyway

		result := phaseEnabled(options, test.test)

		if result != test.expected {
			t.Error("Got unexpected result for phaseEnabled on", i, "Got", result, "expected", test.expected, "for", test.start.String(), test.end.String(), test.test.String())
		}
	}
}

func TestPhaseToString(t *testing.T) {
	var strToPhaseTests = []struct {
		str      string
		expected Phase
	}{
		{"DiFFiculties", Difficulties},
		{"Difficulties", Difficulties},
		{"Foo", -1},
		{"solves", Solves},
		{"analysis", Analysis},
		{"histogram", Histogram},
	}

	for _, test := range strToPhaseTests {
		result := StringToPhase(test.str)
		if result != test.expected {
			t.Error("Test got back wrong StringToPhase.Got", result, "expected:", test.expected)
		}
	}

	var phasetoStringTests = []struct {
		p        Phase
		expected string
	}{
		{Difficulties, "difficulties"},
		{Solves, "solves"},
		{Analysis, "analysis"},
		{Histogram, "histogram"},
		{Phase(len(phaseMap)), ""},
		{-1, ""},
	}

	for _, test := range phasetoStringTests {
		result := test.p.String()
		if result != test.expected {
			t.Error("Test got back wrong phasetoString. Got", result, "Expected:", test.expected)
		}
	}
}

func TestAppOptionsPhase(t *testing.T) {

	options := getDefaultOptions()

	if err := options.fixUp(); err != nil {
		t.Error("Got non-nil error on basic options", err)
	}

	if options.start != Solves || options.end != Analysis {
		t.Error("Start or end defaulted to wrong things when empty:", options.start, options.end)
	}

	options = getDefaultOptions()

	options.rawStart = "analysis"
	options.rawEnd = "histogram"

	if err := options.fixUp(); err != nil {
		t.Error("Got non-nil error on basic options", err)
	}

	if options.start != Analysis {
		t.Error("Expected options.start to be analysis, got", options.start)
	}

	if options.end != Histogram {
		t.Error("Expected options.end to be histogram, got", options.end)
	}

	options = getDefaultOptions()

	options.rawStart = "histogram"
	options.rawEnd = "analysis"

	if err := options.fixUp(); err == nil {
		t.Error("Didn't get error for a start phase that's after an end phase")
	}

	options = getDefaultOptions()

	options.rawStart = "foo"

	if err := options.fixUp(); err == nil {
		t.Error("Didn't get an error for an invalid start phase")
	}

	options = getDefaultOptions()

	options.rawStart = "histogram"

	if err := options.fixUp(); err != nil {
		t.Error("Got unexpected error during fixup: ", err)
	}

	if options.start != Histogram && options.end != Histogram {
		t.Error("Expected start and end to be histogram")
	}

}

func TestPrintHistogram(t *testing.T) {
	goldenData := []float64{
		0.300806723,
		0.3040155992,
		0.3046127357,
		0.3051881561,
		0.3051970624,
		0.3053688686,
		0.3068799507,
		0.306956161,
		0.3073225831,
		0.3080316351,
		0.3081879193,
		0.3088969486,
		0.3101982313,
		0.3114089856,
		0.3117597842,
		0.3119201986,
		0.3130176951,
		0.3130756464,
		0.3136365695,
		0.3163904204,
		0.3166190267,
		0.3193303181,
		0.3204835548,
		0.3218623325,
		0.3227073356,
		0.3232993127,
		0.3248230542,
		0.3255049205,
		0.3259735794,
		0.3291365959,
		0.3296302606,
		0.3297231768,
		0.3304069075,
		0.3309071246,
		0.3313076768,
		0.3317287538,
		0.3338983892,
		0.3339407891,
		0.3346996936,
		0.3364989838,
		0.3372208802,
		0.3377116044,
		0.3379287217,
		0.3393179956,
		0.3429855996,
		0.3431020082,
		0.3434992579,
		0.3437318035,
		0.3440858866,
		0.3453108996,
		0.346765609,
		0.3476861698,
		0.3485967686,
		0.3488674857,
		0.349097176,
		0.3499960826,
		0.3505098576,
		0.3512434429,
		0.3515359888,
		0.3527805513,
		0.3535481661,
		0.3537200651,
		0.3547163466,
		0.3552474332,
		0.3554043824,
		0.3564825768,
		0.3566941055,
		0.3589617108,
		0.3591243455,
		0.3613749176,
		0.3628225781,
		0.3635664718,
		0.3636491475,
		0.363904684,
		0.3639343455,
		0.3645307583,
		0.3645733558,
		0.3676298316,
		0.3681395284,
		0.3681549458,
		0.3687747042,
		0.3690929552,
		0.3698667542,
		0.3699139316,
		0.3707798384,
		0.371397108,
		0.3723237339,
		0.3723862077,
		0.3723909175,
		0.3729705388,
		0.3731882625,
		0.3749187019,
		0.3751886221,
		0.3756730818,
		0.3762212607,
		0.3768279498,
		0.3779521982,
		0.378233808,
		0.3783314507,
		0.3784344043,
		0.3786268496,
		0.3798205134,
		0.3805511234,
		0.3811305346,
		0.3819918964,
		0.3829199587,
		0.3833950301,
		0.3838221166,
		0.3854553484,
		0.3859770071,
		0.3866699914,
		0.3868604381,
		0.3873914889,
		0.3885043099,
		0.3896225295,
		0.3905107131,
		0.3906054896,
		0.3913196693,
		0.392424077,
		0.3925512647,
		0.3932888889,
		0.393639241,
		0.3942036877,
		0.3947838862,
		0.3952374297,
		0.3959261187,
		0.3960238289,
		0.3975842177,
		0.398044452,
		0.3980636389,
		0.3983531282,
		0.3983753543,
		0.3997533979,
		0.399839357,
		0.4000120362,
		0.4001074156,
		0.4006877778,
		0.4008551075,
		0.4008843221,
		0.4009697023,
		0.4013478361,
		0.402874429,
		0.4034218652,
		0.4039375635,
		0.4043791042,
		0.4043825333,
		0.4057674565,
		0.4059419439,
		0.4060691992,
		0.4060967479,
		0.4080006051,
		0.4096922881,
		0.4099229258,
		0.4101297978,
		0.4101427923,
		0.4101847617,
		0.4110579926,
		0.4111736956,
		0.4113361431,
		0.4118489644,
		0.4122502075,
		0.4129890391,
		0.4142115809,
		0.4151715191,
		0.4171544998,
		0.4175021912,
		0.4178013269,
		0.4190846177,
		0.4192578222,
		0.4197250592,
		0.4207875771,
		0.4220495514,
		0.4222588737,
		0.4225302636,
		0.4233680244,
		0.4238634665,
		0.4259167965,
		0.4263649949,
		0.4273548669,
		0.4280833208,
		0.4282136432,
		0.4284247373,
		0.4288885307,
		0.4290307476,
		0.4292562305,
		0.4297289498,
		0.4303913182,
		0.4305681249,
		0.4315306813,
		0.4315517723,
		0.4326243002,
		0.4330899823,
		0.4339671876,
		0.4355683206,
		0.4366168925,
		0.4370647304,
		0.4380608196,
		0.4390460513,
		0.439487443,
		0.4394967318,
		0.4395558748,
		0.4397099849,
		0.4401630636,
		0.4405347615,
		0.4405777773,
		0.440723372,
		0.4408611607,
		0.4412499637,
		0.4427291655,
		0.4435525868,
		0.4435861198,
		0.4439165216,
		0.4443884708,
		0.4445988037,
		0.44546572,
		0.4460186052,
		0.4465648684,
		0.446637312,
		0.4472627825,
		0.4475861046,
		0.4482519178,
		0.4495909762,
		0.4500461643,
		0.4503102645,
		0.4504112972,
		0.4513206048,
		0.4518476966,
		0.4521124978,
		0.4523941363,
		0.4537725219,
		0.4537725559,
		0.4553239461,
		0.4554467879,
		0.4560881939,
		0.4562517287,
		0.4565846255,
		0.4567080099,
		0.4567761856,
		0.4569430052,
		0.4570510663,
		0.4575303403,
		0.4582122025,
		0.4584191794,
		0.4588665086,
		0.4595056796,
		0.4597623861,
		0.4615669713,
		0.4628215031,
		0.4631353183,
		0.4634052985,
		0.4638561294,
		0.464150883,
		0.4653262712,
		0.4658562907,
		0.4658832399,
		0.4666393786,
		0.467474402,
		0.4675072319,
		0.4677971166,
		0.4679293411,
		0.4681318305,
		0.4691471087,
		0.4693000962,
		0.469814341,
		0.4705533923,
		0.4724321491,
		0.4725733547,
		0.4726358908,
		0.4745239632,
		0.4749000139,
		0.4751656315,
		0.4754679718,
		0.4766568693,
		0.4767134701,
		0.4770015366,
		0.4770689263,
		0.4771968886,
		0.4777140853,
		0.4779167544,
		0.4780066596,
		0.4782224309,
		0.4786093661,
		0.4789489924,
		0.4792879904,
		0.4793460042,
		0.4794732236,
		0.4798865921,
		0.4801826456,
		0.4815531312,
		0.4820524239,
		0.4823792497,
		0.483133276,
		0.4836389568,
		0.4837742807,
		0.4840034489,
		0.4842684159,
		0.4844615535,
		0.4846292756,
		0.4856581763,
		0.4858654444,
		0.4859596039,
		0.4860229741,
		0.4878974167,
		0.4882660149,
		0.4884896032,
		0.4885139288,
		0.4890537958,
		0.4894811589,
		0.4904944752,
		0.4918384691,
		0.4921703663,
		0.4923025212,
		0.4924369725,
		0.4931213089,
		0.4932563233,
		0.4933598357,
		0.4936339048,
		0.494672631,
		0.4947751344,
		0.4955054158,
		0.4957897776,
		0.4977213538,
		0.497808269,
		0.4982276735,
		0.4990432175,
		0.4998913503,
		0.500182821,
		0.5002433479,
		0.5007446206,
		0.5016673377,
		0.5017536194,
		0.5025111917,
		0.5027371485,
		0.5030046856,
		0.5030801648,
		0.5036319928,
		0.5039071891,
		0.5042280832,
		0.5047112477,
		0.5052495064,
		0.5052547444,
		0.5067091173,
		0.5076100917,
		0.5076310584,
		0.5087188258,
		0.5089610773,
		0.5089761885,
		0.5101240436,
		0.5103674771,
		0.510823112,
		0.5111149199,
		0.5113486794,
		0.5127872672,
		0.5136935565,
		0.516028883,
		0.5165531588,
		0.5185674819,
		0.5200401308,
		0.5204922094,
		0.5207457738,
		0.5210858526,
		0.5218247888,
		0.5228292336,
		0.5254231307,
		0.5262538209,
		0.5263711102,
		0.5267662542,
		0.5268324705,
		0.5278621022,
		0.5278891052,
		0.5283319029,
		0.5288193572,
		0.5288396716,
		0.5309608265,
		0.5315171064,
		0.5317415126,
		0.5326280235,
		0.5327326116,
		0.5335912927,
		0.5341530193,
		0.5342971938,
		0.5346667403,
		0.5357162404,
		0.5357330213,
		0.5358451281,
		0.5360598737,
		0.53611,
		0.5361746335,
		0.536733153,
		0.5369555174,
		0.5379829317,
		0.5387087484,
		0.5388574346,
		0.5400913201,
		0.5411969135,
		0.5429909153,
		0.5435802701,
		0.5449790489,
		0.5456304775,
		0.5459757248,
		0.5466497077,
		0.5476332379,
		0.5489315844,
		0.549013312,
		0.5490936367,
		0.5505992743,
		0.5509183617,
		0.5519267207,
		0.5528171019,
		0.5531602881,
		0.553172685,
		0.5541952724,
		0.5548576353,
		0.5561118475,
		0.5566192308,
		0.5581274852,
		0.5598303147,
		0.5599169543,
		0.5600444982,
		0.5613106505,
		0.5613955237,
		0.5617545896,
		0.5635295923,
		0.5643647885,
		0.5648712415,
		0.5662341012,
		0.5686206849,
		0.5692112084,
		0.571954783,
		0.5725451326,
		0.572902582,
		0.575881408,
		0.5759166793,
		0.5769177082,
		0.5770567265,
		0.577459396,
		0.5786916196,
		0.578773578,
		0.5788740106,
		0.5794249697,
		0.5802786171,
		0.580982503,
		0.5814564771,
		0.5823967369,
		0.5828747451,
		0.5852369735,
		0.5856569979,
		0.5859285833,
		0.5860611669,
		0.5861504455,
		0.5887734507,
		0.5907214944,
		0.5912052359,
		0.5912339524,
		0.5912531035,
		0.5933397416,
		0.5935472185,
		0.5940457772,
		0.5948860165,
		0.5961168756,
		0.5979280186,
		0.5991556913,
		0.599840421,
		0.6009080303,
		0.6052696447,
		0.6053763547,
		0.605448457,
		0.6060528246,
		0.6069467181,
		0.6100663594,
		0.6146754821,
		0.6154841046,
		0.6175505305,
		0.6188061812,
		0.6198709715,
		0.6251273361,
		0.6252404516,
		0.6260554858,
		0.6314152672,
		0.6316149806,
		0.637147775,
		0.6378925564,
		0.6391872471,
		0.642761431,
		0.643611776,
		0.6461387855,
		0.6544459452,
		0.6574452789,
		0.6684900476,
		0.6772993985,
		0.6800970832,
		0.6820055169,
		0.6982249694,
		0.71623262,
		0.7452434698,
		0.7737686645,
		0.8092586132,
		0.8116671961,
		0.8311098318,
		0.8789286343,
	}

	histogramWidth := 100
	histogramHeight := 20

	histogram := makeHistogram(goldenData, histogramWidth, histogramHeight)

	//TODO: actually test that this histogram makes logical sense, other than
	//being vaguely histogram-like

	if len(histogram) != histogramHeight+2 {
		t.Error("Wrong number of lines:", len(histogram))
	}
	for i, line := range histogram {
		if i >= 20 {
			//Last two lines, fine
			continue
		}
		if len(line) > histogramWidth+1 {
			t.Error("Line was too long:", i, len(line))
		}
		line = strings.Replace(line, "*", "", -1)
		line = strings.Replace(line, "|", "", -1)
		if line != "" {
			t.Error("Line contained illegal characters:", line)
		}

	}

}

//Callers should call fixUpOptions after receiving this.
func getDefaultOptions() *appOptions {
	options := newAppOptions(flag.NewFlagSet("main", flag.ExitOnError))
	options.flagSet.Parse([]string{})
	return options
}
