import logging
import string
import sys
import os
import random

INPUT_FILE_NAME = "input.txt"
DEFAULT_INPUT_FILE_NAME = "input.SAMPLE.txt"
OUTPUT_FILE_NAME = "../hs_difficulty_weights.go"

def convertDifficulties():

	try:
		f = open(os.path.join(sys.path[0], INPUT_FILE_NAME))
	except IOError:
		try:
			f = open(os.path.join(sys.path[0], DEFAULT_INPUT_FILE_NAME))
		except IOError:
			logging.error("Couldn't find file at either " + INPUT_FILE_NAME + " or " + DEFAULT_INPUT_FILE_NAME)
			return

	result = {}

	for line in f:
		line = string.lstrip(line)
		if len(line) == 0:
			continue
		if line[0] != "+" and line[0] != "-":
			#All lines we're looking for start with either + or -
			continue
		negative = line[0] == "-"
		line = string.lstrip(line[1:])
		parts = line.split(" * ")
		if len(parts) > 2:
			logging.error("Skipped line " + line + " because it was not shaped the way we expected.")
		
		if len(parts) == 1:
			name = "Constant"
		else:
			name = string.strip(parts[1])

		if negative:
			parts[0] = "-" + parts[0]

		result[name] = float(parts[0])

	f.close()

	o = open(os.path.abspath(os.path.join(sys.path[0], OUTPUT_FILE_NAME)), "w")

	o.write("package sudoku\n\n")
	o.write("//auto-generated by difficulty-convert.py DO NOT EDIT\n\n")
	
	o.write("func init() {\n")

	o.write("\tLoadDifficultyModel(map[string]float64{\n")

	for key in sorted(result):
		o.write("\t\t\"" + key + "\" : " + str(result[key]) + ",\n")

	o.write("\t})\n")
	o.write("}\n")

	o.close()

convertDifficulties()